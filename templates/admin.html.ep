<%
  my $config = $self->app->config;

  # データファイル
  my $data_file = config->{logfile};

  # データ受理
  my $in = {};
  $in->{pass} = param('pass');
  $in->{job_edit} = param('job_edit');
  $in->{job_dele} = param('job_dele');
  $in->{job} = param('job');
  $in->{no} = param('no');

  # テンプレートで使う変数
  my $error;
  my $message;
  my $title;
  my $entry;
  my $entries = [];
  my $back;
  my $next;
  my $no;
  my $pass = $in->{pass};
  
  # パスワード認証失敗
  if ($pass && $pass ne $config->{password}) {
    $error = '認証できません';
  }
  # 管理モード
  else {

    # 削除処理
    if ($in->{job_dele} && $in->{no}) {

      # 削除する番号
      my %delete_no_h = map { $_ => 1} @{$self->every_param('no')};

      # 削除情報をマッチング
      my @lines;
      open(my $data_fh, '+<', $data_file)
        or Carp::croak("open error: $data_file");
      flock($data_fh, 2);
      while (my $line = <$data_fh>) {
        $line = Encode::decode('UTF-8', $line);
        my $entry = $self->aska->parse_data_line($line);

        unless ($delete_no_h{$entry->{no}}) {
          push(@lines, $line);
        }
      }

      # 新しいデータで更新
      seek($data_fh, 0, 0);
      for my $line (@lines) {
        $line = Encode::encode('UTF-8', $line);
        print $data_fh $line;
      }
      truncate($data_fh, tell($data_fh));
      close($data_fh);
    }
    # 修正画面
    elsif ($in->{job_edit} && $in->{no}) {
      my $log;
      open(my $in_fh, '<', $data_file)
        or Carp::croak("open error: $data_file");
      while (my $line = <$in_fh>) {
        $line = Encode::decode('UTF-8', $line);
        my ($no,$dat,$nam,$email,$sub,$comment,$url) = split(/<>/, $line);
        
        if ($in->{no} == $no) {
          $log = $line;
          last;
        }
      }
      close($in_fh);

      # 修正フォームへ
      my ($no,$date,$name,$email,$sub,$comment,$url) = split(/<>/, $log);

      $comment =~ s|<br( /)?>|\n|g;
      $url ||= "http://";
      
      $entry = {
        no => $no,
        date => $date,
        name => $name,
        email => $email,
        sub => $sub,
        comment => $comment,
        url => $url
      };
      
      $title = "管理モード ＞ 修正フォーム";
    }
    # 修正実行
    elsif ($in->{job} eq "edit") {
      $in->{name} = param('name');
      $in->{sub}  = param('sub');
      $in->{comment} = param('comment');
      $in->{url} = param('url');
      $in->{email} = param('email');
      
      # 未入力の場合
      if ($in->{url} eq "http://") { $in->{url} = ""; }
      $in->{sub} ||= "無題";

      # 読み出し
      my @data;
      open(my $data_fh, '+<', $data_file)
        or Carp::croak("open error: $data_file");
      flock($data_fh, 2);
      while (my $line = <$data_fh>) {
        $line = Encode::decode('UTF-8', $line);
        my ($no,$dat,$nam,$email,$sub,$comment,$url,$hos,$pwd,$tim) = split(/<>/, $line);

        if ($in->{no} == $no) {
          $line = "$no<>$dat<>$in->{name}<>$in->{email}<>$in->{sub}<>$in->{comment}<>$in->{url}<>$hos<>$pwd<>$tim<>\n";
        }
        push(@data,$line);
      }

      # 更新
      seek($data_fh, 0, 0);
      for my $d (@data) {
        $d = Encode::encode('UTF-8', $d);
        print $data_fh @data;
      }
      truncate($data_fh, tell($data_fh));
      close($data_fh);

      # 完了メッセージ
      $message = "記事を修正しました";
    }

    # ページ数
    my $page = 0;
    foreach ( keys $in ) {
      if (/^page:(\d+)/) {
        $page = $1;
        last;
      }
    }

    # 最大表示件数
    my $logs = 30;
    
    $title = '管理モード';

    # 記事を展開
    my $i = 0;
    open(my $in_fh, '<',  $data_file)
      or Carp::croak("open error: $data_file");
    while (my $line = <$in_fh>) {
      $line = Encode::decode('UTF-8', $line);
      $i++;
      next if ($i < $page + 1);
      last if ($i > $page + $logs);
      
      my $entry = $self->aska->parse_data_line($line);
      
      push @$entries, $entry;
    }
    close($in_fh);

    # ページ繰越定義
    $next = $page + $logs;
    $back = $page - $logs;
  };

  $title ||= '入室画面';

  layout 'common', title => $title;

%>

%= stylesheet begin
  body,td,th { font-size:80%; background:#f0f0f0; font-family:Verdana,"MS PGothic","Osaka",Arial,sans-serif; }
  p.ttl { font-weight:bold; color:#004080; border-bottom:1px solid #004080; padding:2px; }
  p.err { color:#dd0000; }
  p.msg { color:#006400; }
  table.form-tbl { border:1px solid #8080C0; border-collapse:collapse; margin:1em 0; }
  table.form-tbl th { border:1px solid #8080C0; background:#DCDCED; padding:5px; }
  table.form-tbl td { border:1px solid #8080C0; background:#fff; padding:5px; }
  div.ttl { border-bottom:1px solid #004080; padding:4px; color:#004080; font-weight:bold; margin:1em 0; }
  div.btn input { width:60px; }
  div.art { border-top:1px dotted gray; padding:5px; margin-top:10px; }
  div.art span, div.art strong { color:green; }
  div.comment { margin-left:2em; color:#804000; font-size:90%; }
% end

% if ($in->{pass} eq '') {
  <div align="center">
    <form action="<%= url_for('/admin') %>" method="post">
      <table width="410" style="margin-top:50px">
        <tr>
          <td height="50" align="center">
            <fieldset><legend>管理パスワード入力</legend><br>
              <%= password_field 'pass', size => '26' %>
              <%= submit_button '認証'; %><br><br>
            </fieldset>
          </td>
        </tr>
      </table>
    </form>
    <script language="javascript">
    <!--
    self.document.forms[0].pass.focus();
    //-->
    </script>
  </div>
% } elsif ($error) {
  <%= include '/include/error', error => $error %>
% } elsif ($message) {
  <%= include '/include/message', message => $message %>
% } elsif ($in->{job_edit}) {
  <div align="right">
    <form method="post">
      <%= hidden_field mode => 'admin' %>
      <%= hidden_field pass => $in->{pass} %>
      <%= submit_button '&lt; 前画面' %>
    </form>
  </div>
  <div class="ttl">■ 編集フォーム</div>
  <ul>
    <li>変更する部分のみ修正して送信ボタンを押してください。
  </ul>
  <form method="post">
    <%= hidden_field mode => 'admin' %>
    <%= hidden_field job => 'edit' %>
    <%= hidden_field no => $entry->{no} %>
    <%= hidden_field pass => $in->{pass} %>
    <table class="form-tbl">
      <tr>
        <th>おなまえ</th>
        <td><input type="text" name="name" size="28" value="<%= $entry->{name} %>"></td>
      </tr><tr>
        <th>Ｅメール</th>
        <td><input type="text" name="email" size="28" value="<%= $entry->{email} %>"></td>
      </tr><tr>
        <th>タイトル</th>
        <td><input type="text" name="sub" size="36" value="<%= $entry->{sub} %>"></td>
      </tr><tr>
        <th>参照先</th>
        <td><input type="text" name="url" size="50" value="<%= $entry->{url} %>"></td>
      </tr><tr>
        <th>内容</th>
        <td><textarea name="comment" cols="56" rows="7">
        <%= $entry->{comment} %></textarea></td>
      </tr>
    </table>
    <%= submit_button '送信する' %>
    <input type="reset" value="リセット">
  </form>
% } else {

  <div align="right">
    <a href="<%= url_for('/') %>"><button>&lt; 掲示板</button></a>
  </div>
  <div class="ttl">■ 管理モード</div>
  <form method="post">
    <%= hidden_field mode => 'admin' %>
    <%= hidden_field 'pass' => $pass %>
    <div class="btn">
      <%= submit_button '修正', name => 'job_edit' %>
      <%= submit_button '削除', name => 'job_dele' %>
    </div>

    % for my $entry (@$entries) {
      <div class="art">
        <input type="checkbox" name="no" value="<%= $entry->{no} %>">
        [<%= $entry->{no} %>]
        <strong><%= $entry->{title} %></strong>
        投稿者：<b><%= $entry->{name} %></b>
        <%= $entry->{date} %>
        [ <span><%= $entry->{host} %></span> ]
      </div>
      <div class="comment"><%= $self->aska->parse_comment($entry->{comment}) %></div>
    % }
    % if ($back >= 0) {
      <%= submit_button '前ページ', name => "page:$back" %>
    % }
    % if ($next < @$entries) {
      <%= submit_button '次ページ', name => "page:$next" %>
    % }
  </form>
% }
