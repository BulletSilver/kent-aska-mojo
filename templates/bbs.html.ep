<%
  use Encode ();
  
  my $config = app->config;

  # パラメーター
  my $in = {};
  $in->{mode} = param('mode');
  
  # データファイル
  my $data_file = config->{logfile};
  
  # テンプレートで利用する変数
  my $bbs_title;
  my $homepage;
  my $use_captcha;
  my $str_crypt;
  my $message;
  my $error;
  my $title;
  my $entries;
  
  if (lc $self->req->method eq 'post') {
    # 記事投稿
    if ($in->{mode} eq 'regist') {

      $in->{sub} = param('sub');
      $in->{name} = param('name');
      $in->{pwd} = param('pwd');
      $in->{captcha} = param('captcha');
      $in->{comment} = param('comment');
      $in->{str_crypt} = param('str_crypt');

      # 不要改行カット
      $in->{sub}  =~ s|<br />||g;
      $in->{name} =~ s|<br />||g;
      $in->{pwd}  =~ s|<br />||g;
      $in->{captcha} =~ s|<br />||g;
      $in->{comment} =~ s|(<br />)+$||g;
      
      #  禁止ワードチェック
      if ($config->{no_wd}) {
        my $flg;
        for ( split(/,/,$config->{no_wd}) ) {
          if (index("$in->{name} $in->{sub} $in->{comment}", $_) >= 0) {
            $flg = 1;
            last;
          }
        }
        if ($flg) {
          $error ||= "禁止ワードが含まれています";
        }
      }

      # 日本語チェック(漢字、ひらがな、カタカナ)
      if ($config->{jp_wd}) {
        if ($in->{comment} !~ /[\p{Han}\p{Hiragana}\p{Katakana}]/) {
          $error ||= "メッセージに日本語が含まれていません";
        }
      }

      #  URL個数チェック
      if ($config->{urlnum} > 0) {
        my $comment = $in->{comment};
        my ($num) = ($comment =~ s|(https?://)|$1|ig);
        if ($num > $config->{urlnum}) {
          $error ||= "コメント中のURLアドレスは最大$config->{urlnum}個までです";
        }
      }

      # 画像認証チェック
      if ($config->{use_captcha} > 0) {
        require $self->app->home->rel_file('lib/captcha.pl');
        if ($in->{captcha} !~ /^\d{$config->{cap_len}}$/) {
          $error ||= "画像認証が入力不備です。<br />投稿フォームに戻って再読込み後、再入力してください";
        }

        # 投稿キーチェック
        # -1 : キー不一致
        #  0 : 制限時間オーバー
        #  1 : キー一致
        my $chk = cap::check($in->{captcha},$in->{str_crypt},$config->{captcha_key},$config->{cap_time},$config->{cap_len});
        if ($chk == 0) {
          $error = "画像認証が制限時間を超過しました。<br />投稿フォームに戻って再読込み後指定の数字を再入力してください";
        } elsif ($chk == -1) {
          $error = "画像認証が不正です。<br />投稿フォームに戻って再読込み後再入力してください";
        }
      }

      # 未入力の場合
      if ($in->{url} eq "http://") { $in->{url} = ""; }
      $in->{sub} ||= '無題';

      # フォーム内容をチェック
      if ($in->{name} eq "") {
        $error ||= "名前が入力されていません<br />";
      }
      if ($in->{comment} eq "") {
        $error ||= "コメントが入力されていません<br />";
      }
      if ($in->{email} ne '' && $in->{email} !~ /^[\w\.\-]+\@[\w\.\-]+\.[a-zA-Z]{2,6}$/) {
        $error ||= "Ｅメールの入力内容が不正です<br />";
      }
      if ($in->{url} ne '' && $in->{url} !~ /^https?:\/\/[\w\-.!~*'();\/?:\@&=+\$,%#]+$/) {
        $error ||= "参照先URLの入力内容が不正です<br />";
      }
      
      # ホスト取得
      my ($host, $addr) = $self->aska->get_host();
      
      # 削除キー暗号化
      my $pwd = $self->aska->encrypt($in->{pwd}) if ($in->{pwd} ne "");
      
      # 時間取得
      my $time = time;
      my ($min,$hour,$mday,$mon,$year,$wday) = (localtime($time))[1..6];
      my @wk = ('Sun','Mon','Tue','Wed','Thu','Fri','Sat');
      my $date = sprintf("%04d/%02d/%02d(%s) %02d:%02d",
            $year+1900,$mon+1,$mday,$wk[$wday],$hour,$min);
      
      # 記事読み取り
      open(my $dat_fh, '+<', $data_file)
        or Carp::croak("open error: $data_file");
      flock($dat_fh, 2);
      my @lines;
      while (my $line = <$dat_fh>) {
        $line =~ s/\x0D?\x0A?$//;
        $line = Encode::decode('UTF-8', $line);
        push @lines, $line;
      }
      
      # 先頭記事
      my $top = $lines[0];
      
      # 重複投稿チェック
      my ($no,$dat,$nam,$email,$sub,$comment,$url,$hos,$pw,$tim) = split(/<>/,$top);
      if ($in->{name} eq $nam && $in->{comment} eq $comment) {
        $error ||= "二重投稿は禁止です";
      }

      # 連続投稿チェック
      my $flg;
      if ($config->{regCtl} == 1) {
        if ($host eq $hos && $time - $tim < $config->{wait}) {
          $flg = 1;
        }
      } elsif ($config->{regCtl} == 2) {
        if ($time - $tim < $config->{wait}) {
          $flg = 1;
        }
      }
      if ($flg) {
        $error ||= "現在投稿制限中です。もうしばらくたってから投稿をお願いします";
      }
      
      unless ($error) {
        # 記事No採番
        $no++;

        # 記事数調整
        my @new_lines;
        my $i = 0;
        for my $line (@lines) {
          $i++;
          push(@new_lines, $line);
          last if ($i >= $config->{maxlog} - 1);
        }

        # 更新
        my $new_line = "$no<>$date<>$in->{name}<>$in->{email}<>$in->{sub}<>$in->{comment}<>$in->{url}<>$host<>$pwd<>$time<>";
        unshift @new_lines, $new_line;
        seek($dat_fh, 0, 0);
        for my $line (@new_lines) {
          $line = Encode::encode('UTF-8', $line);
          print $dat_fh "$line\n";
        }
        truncate($dat_fh, tell($dat_fh));

        # クッキー格納
        $self->session(name => $in->{name});
        $self->session(email => $in->{email});
        $self->session(url => $in->{url});

        # メール通知
        $self->aska->mail_to($in, $date,$host) if ($config->{mailing} == 1);

        # 完了画面
        $message = "ありがとうございます。記事を受理しました。";
      }
    }
    
    # ユーザー記事削除
    if ($in->{mode} eq 'dele') {
      $in->{num} = param('in');
      $in->{pwd} = param('pwd');
    
      # 入力チェック
      if ($in->{num} eq '' or $in->{pwd} eq '') {
        $error ||= "削除Noまたは削除キーが入力モレです";
      }

      my ($flg,$crypt,@log);
      open(my $dat_fh, '+<', $data_file)
        or croak("open error: $data_file");
      flock($dat_fh, 2);;
      while (my $line = <$dat_fh>) {
        $line = Encode::decode('UTF-8', $line);

        my ($no,$dat,$nam,$email,$sub,$comment,$url,$hos,$pw,$tim) = split(/<>/, $line);

        if ($in->{num} == $no) {
          $flg++;
          $crypt = $pw;
          next;
        }
        push(@log,$line);
      }

      if (!$flg or !$crypt) {
        close($dat_fh);
        $error ||= "削除キーが設定されていないか又は記事が見当たりません";
      }

      # 削除キーを照合
      if (app->aska->decrypt($in->{pwd},$crypt) != 1) {
        close($dat_fh);
        $error ||= "認証できません";
      }

      # ログ更新
      seek($dat_fh, 0, 0);
      for my $l (@log) {
        $l = Encode::encode('UTF-8', $l);
        print $dat_fh $l;
      }
      truncate($dat_fh, tell($dat_fh));
      close($dat_fh);

      # 完了
      $message = "記事を削除しました";
    }
  }
  else {
    #  記事表示
    $in->{res} = param('res');
    
    $in->{res} =~ s/\D//g;
    my %res;
    if ($in->{res}) {
      my $flg;
      open(my $in_fh, '<', $data_file)
        or Carp::croak("open error: $data_file");
      while (my $line = <$in_fh>) {
        $line = Encode::decode('UTF-8', $line);
        my ($no,$sub,$comment) = (split(/<>/, $line))[0,4,5];
        if ($in->{res} == $no) {
          $flg++;
          $res{sub} = $sub;
          $res{comment} = $comment;
          last;
        }
      }
      close($in_fh);

      if (!$flg) { $error ||= "該当記事が見つかりません"; }

      $res{sub} =~ s/^Re://g;
      $res{sub} =~ s/\[\d+\]\s?//g;
      $res{sub} = "Re:[$in->{res}] $res{sub}";
      $res{comment} = "&gt; $res{comment}";
      $res{comment} =~ s|<br( /)?>|\n&gt; |ig;
    }

    # ページ数定義
    my $pg = $in->{pg} || 0;

    # データオープン
    my ($i,@log);
    open(my $in_fh, '<', $data_file)
      or Carp::croak("open error: $data_file");
    while (my $line = <$in_fh>) {
      $line = Encode::decode('UTF-8', $line);
      $i++;
      next if ($i < $pg + 1);
      next if ($i > $pg + $config->{pg_max});
      
      push(@log, $line);
    }
    close($in_fh);

    # 繰越ボタン作成
    my $page_btn = $self->aska->make_pager($i,$pg);

    # ループ部
    $entries = [];
    for my $line (@log) {
      my ($no, $date, $name, $email, $sub, $comment, $url) = split(/<>/, $line);
      $name = qq|<a href="mailto:$email">$name</a>| if ($email);
      $comment = $self->aska->autolink($comment) if ($config->{autolink});
      $comment =~ s/([>]|^)(&gt;[^<]*)/$1<span style="color:$config->{ref_col}">$2<\/span>/g if ($config->{ref_col});
      $comment .= qq|<p class="url"><a href="$url" target="_blank">$url</a></p>| if ($url);
      
      my $entry = {
        no => $no,
        date => $date,
        name => $name,
        email => $email,
        sub => $sub,
        comment => $comment,
        url => $url
      };
      
      push @$entries, $entry;
    }

    # コンフィグ
    my $config = app->config;
    
    # ホームページ
    $homepage = $config->{homepage};
    
    # BBSタイトル
    $bbs_title = $config->{bbs_title};
    
    # 画像キャプチャを使う
    $use_captcha = $config->{use_captcha};

    # 画像認証作成
    my $str_plain;
    if ($use_captcha > 0) {
      require $self->app->home->rel_file('lib/captcha.pl');

      ($str_plain,$str_crypt) = cap::make($config->{captcha_key},$config->{cap_len});
    }
    
    # スタッシュ
    $title = $bbs_title;
  }
  
  # レイアウト
  layout 'common', title => $title;
%>

<%= include '/include/header' %>

% if ($message) {
  <%= include 'include/message', message => $message %>
% } elsif ($error) {
  <%= include 'include/error', error => $error %>
% } else {

  <div align="center">
  <h1><%= $bbs_title %></h1>
  <hr width="90%" />
  [<a href="<%= url_for($homepage) %>" target="_top">トップに戻る</a>]
  [<a href="<%= url_for('/note') %>" target="note" onclick="popup('/note')">留意事項</a>]
  [<a href="<%= url_for('/find') %>">ワード検索</a>]
  [<a href="<%= url_for('/admin') %>">管理用</a>]
  <hr width="90%" />
  </div>
  <div class="setback">
    <form method="post">
      <%= hidden_field mode => "regist" %>
      <table class="regfm">
      <tr>
        <th>おなまえ</th>
        <td><%= text_field name => session('name'), size => '30' %></td>
      </tr><tr>
        <th>Ｅメール</th>
        <td><%= text_field email => session('email'), size => '30' %></td>
      </tr><tr>
        <th>タイトル</th>
        <td>
          <%= text_field 'sub', size => '36' %>
          <%= submit_button '送信する' %><input type="reset" value="リセット" />
        </td>
      </tr><tr>
        <th colspan="2">
            メッセージ<br />
            <%= text_area 'comment', cols => '60', entries => '7' %>
        </th>
      </tr><tr>
        <th>参照先</th>
        <td><%= text_field url => session('url') // 'http://', size => '50' %></td>
      </tr><tr>
        <th>削除キー</th>
        <td class="small">
            <%= password_field 'pwd', size => '8'. maxlength => '8' %>
          （英数字で8文字以内）&nbsp;
          <%= check_box cookie => 1, checked => 'checked' %> クッキー情報保存
        </td>

      % if ($use_captcha) {
        </tr><tr>
          <th>画像認証</th>
          <td class="small">
            <%= text_field 'captcha', size => '8', style => 'ime-mode:inactive', maxlength => '8' %>
            （右画像の数字を入力） <img src="<%= url_for("/captcha")->query(crypt => $str_crypt) %>" class="capt" alt="投稿キー" />
            <%= hidden_field str_crypt => $str_crypt %>
          </td>
      % }
      </tr>
      </table>
      </form>
    </div>

    % for my $entry (@$entries) {
      <div class="art">
        [<b><%= $entry->{no} %></b>] <strong><%= $entry->{sub} %></strong>
        投稿者：<b><%= $entry->{name} %></b> 投稿日：<%= $entry->{date} %> &nbsp; [<a href="<%= url_for->query(res => $entry->{no}) %>">返信</a>]
        <div class="comment"><%= $entry->{comment} %></div>
      </div>
    % }
    
    <div class="art-end"></div>
    
    <div class="ta-c">
      <form action="<%= url_for %>" method="post">
        <input type="hidden" name="mode" value="dele" />
        記事No<input type="text" name="num" size="3" />
        削除キー<input type="password" name="pwd" size="4" maxlength="8" />
        <input type="submit" value="削除" />
      </form>
    </div>
  </div>
% }

<%= include '/include/footer' %>
