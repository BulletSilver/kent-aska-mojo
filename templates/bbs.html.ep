<%
  use Encode ();
  
  my $config = app->config;

  # パラメーター
  my $in = {};
  $in->{mode} = param('mode');
  
  # データファイル
  my $data_file = config->{logfile};
  
  # テンプレートで利用する変数
  my $bbs_title;
  my $homepage;
  my $use_captcha;
  my $str_crypt;
  my $message;
  my $error;
  my $title;
  my $entries;
  my $res_entry;
  my $pager;
  
  if (lc $self->req->method eq 'post') {
    # 記事投稿
    if ($in->{mode} eq 'regist') {

      $in->{sub} = param('sub');
      $in->{name} = param('name');
      $in->{pwd} = param('pwd');
      $in->{captcha} = param('captcha');
      $in->{comment} = param('comment');
      $in->{str_crypt} = param('str_crypt');
      $in->{url} = param('url');
      $in->{email} = param('email');

      #  禁止ワードチェック
      if ($config->{no_wd}) {
        my $found;
        for ( split(/,/,$config->{no_wd}) ) {
          if (index("$in->{name} $in->{sub} $in->{comment}", $_) >= 0) {
            $found = 1;
            last;
          }
        }
        if ($found) {
          $error ||= "禁止ワードが含まれています";
        }
      }

      # 日本語チェック(漢字、ひらがな、カタカナ)
      if ($config->{jp_wd}) {
        if ($in->{comment} !~ /[\p{Han}\p{Hiragana}\p{Katakana}]/) {
          $error ||= "メッセージに日本語が含まれていません";
        }
      }

      #  URL個数チェック
      if ($config->{urlnum} > 0) {
        my $comment = $in->{comment};
        my ($num) = ($comment =~ s|(https?://)|$1|ig);
        if ($num > $config->{urlnum}) {
          $error ||= "コメント中のURLアドレスは最大$config->{urlnum}個までです";
        }
      }

      # 画像認証チェック
      if ($config->{use_captcha} > 0) {
        require $self->app->home->rel_file('lib/captcha.pl');
        if ($in->{captcha} !~ /^\d{$config->{cap_len}}$/) {
          $error ||= "画像認証が入力不備です。\n投稿フォームに戻って再読込み後、再入力してください";
        }

        # 投稿キーチェック
        # -1 : キー不一致
        #  0 : 制限時間オーバー
        #  1 : キー一致
        my $chk = cap::check($in->{captcha},$in->{str_crypt},$config->{captcha_key},$config->{cap_time},$config->{cap_len});
        if ($chk == 0) {
          $error = "画像認証が制限時間を超過しました。\n投稿フォームに戻って再読込み後指定の数字を再入力してください";
        } elsif ($chk == -1) {
          $error = "画像認証が不正です。\n投稿フォームに戻って再読込み後再入力してください";
        }
      }

      # 未入力の場合
      if ($in->{url} eq "http://") { $in->{url} = ""; }
      $in->{sub} ||= '無題';

      # フォーム内容をチェック
      if ($in->{name} eq "") {
        $error ||= "名前が入力されていません";
      }
      if ($in->{comment} eq "") {
        $error ||= "コメントが入力されていません";
      }
      if ($in->{email} ne '' && $in->{email} !~ /^[\w\.\-]+\@[\w\.\-]+\.[a-zA-Z]{2,6}$/) {
        $error ||= "Ｅメールの入力内容が不正です";
      }
      if ($in->{url} ne '' && $in->{url} !~ /^https?:\/\/[\w\-.!~*'();\/?:\@&=+\$,%#]+$/) {
        $error ||= "参照先URLの入力内容が不正です";
      }
      
      # ホスト取得
      my ($host, $addr) = $self->aska->get_host();
      
      # 削除キー暗号化
      my $pwd = $self->aska->encrypt($in->{pwd}) if ($in->{pwd} ne "");
      
      # 時間取得
      my $time = time;
      my ($min, $hour, $mday, $mon, $year, $wday) = (localtime($time))[1..6];
      my @wk = ('Sun','Mon','Tue','Wed','Thu','Fri','Sat');
      my $date = sprintf("%04d/%02d/%02d(%s) %02d:%02d",
        $year+1900, $mon+1, $mday, $wk[$wday], $hour, $min);
      
      # 記事読み取り
      open(my $dat_fh, '+<', $data_file)
        or Carp::croak("open error: $data_file");
      flock($dat_fh, 2);
      my @lines;
      while (my $line = <$dat_fh>) {
        $line =~ s/\x0D?\x0A?$//;
        $line = Encode::decode('UTF-8', $line);
        push @lines, $line;
      }
      
      # 先頭記事
      my $top = $lines[0];
      
      # 重複投稿チェック
      my $top_entry = $self->aska->parse_data_line($top);
      if ($in->{name} eq $top_entry->{name} && $in->{comment} eq $top_entry->{comment}) {
        $error ||= "二重投稿は禁止です";
      }

      # 連続投稿チェック
      my $found;
      if ($config->{regCtl} == 1) {
        if ($host eq $top_entry->{host} && $time - $top_entry->{time} < $config->{wait}) {
          $found = 1;
        }
      } elsif ($config->{regCtl} == 2) {
        if ($time - $top_entry->{time} < $config->{wait}) {
          $found = 1;
        }
      }
      if ($found) {
        $error ||= "現在投稿制限中です。もうしばらくたってから投稿をお願いします";
      }
      
      unless ($error) {
        # 記事No採番
        my $no = $top_entry->{no} + 1;

        # 記事数調整
        my @new_lines;
        my $i = 0;
        for my $line (@lines) {
          $i++;
          push(@new_lines, $line);
          last if ($i >= $config->{maxlog} - 1);
        }

        # 更新
        $in->{no} = $no;
        $in->{date} = $date;
        $in->{host} = $host;
        $in->{pwd} = $pwd;
        $in->{time} = $time;
        
        my $new_line = $self->aska->create_data_line($in);
        unshift @new_lines, $new_line;
        seek($dat_fh, 0, 0);
        for my $line (@new_lines) {
          $line = Encode::encode('UTF-8', $line);
          print $dat_fh "$line\n";
        }
        truncate($dat_fh, tell($dat_fh));

        # クッキー格納
        $self->session(name => $in->{name});
        $self->session(email => $in->{email});
        $self->session(url => $in->{url});

        # メール通知
        $self->aska->mail_to($in, $date, $host) if ($config->{mailing} == 1);

        # 完了画面
        $message = "ありがとうございます。記事を受理しました。";
      }
    }
    
    # ユーザー記事削除
    if ($in->{mode} eq 'dele') {
      $in->{no} = param('no');
      $in->{pwd} = param('pwd');
    
      # 入力チェック
      if ($in->{no} eq '' || $in->{pwd} eq '') {
        $error ||= "削除Noまたは削除キーが入力モレです";
      }
      
      unless ($error) {
        my $found;
        my $crypt;
        my @lines;
        
        open(my $dat_fh, '+<', $data_file)
          or Carp::croak("open error: $data_file");
        flock($dat_fh, 2);;
        while (my $line = <$dat_fh>) {
          $line = Encode::decode('UTF-8', $line);
          
          my $entry = $self->aska->parse_data_line($line);

          if ($in->{no} == $entry->{no}) {
            $found++;
            $crypt = $entry->{pwd};
            next;
          }
          push(@lines, $line);
        }

        if (!$found || !$crypt) {
          $error ||= "削除キーが設定されていないか又は記事が見当たりません";
        }

        # 削除キーを照合
        if (app->aska->decrypt($in->{pwd}, $crypt) != 1) {
          $error ||= "認証できません";
        }
        
        unless ($error) {
          # ログ更新
          seek($dat_fh, 0, 0);
          for my $line (@lines) {
            $line = Encode::encode('UTF-8', $line);
            print $dat_fh $line;
          }
          truncate($dat_fh, tell($dat_fh));
          close($dat_fh);

          # 完了
          $message = "記事を削除しました";
        }
      }
    }
  }
  #  記事表示
  else {
    # ページ番号
    my $page = param('page') || 1;
    $page = 1 if $page < 1;
    $page = int $page;
    
    # レスポンス番号
    my $res_no = param('res');
    
    # レスポンスの場合
    if ($res_no) {
      # レスポンス対象のエントリーを探す
      my $found;
      open(my $data_fh, '<', $data_file)
        or Carp::croak("open error: $data_file");
      while (my $line = <$data_fh>) {
        $line = Encode::decode('UTF-8', $line);
        
        my $entry = $self->aska->parse_data_line($line);
        
        if ($res_no == $entry->{no}) {
          $found = 1;
          $res_entry = {};
          $res_entry->{sub} = $entry->{sub};
          $res_entry->{comment} = $entry->{comment};
          last;
        }
      }
      close($data_fh);
      
      # 見つからなかった場合はエラー
      if ($found) {
        # タイトルとコメントの修正
        $res_entry->{sub} =~ s/^Re://g;
        $res_entry->{sub} =~ s/\[\d+\]\s?//g;
        $res_entry->{sub} = "Re:[$res_no] $res_entry->{sub}";
        $res_entry->{comment} = "> $res_entry->{comment}";
        $res_entry->{comment} =~ s/\n/\n> /g;
      }
      else {
        $error ||= "該当記事が見つかりません";
      }
    }

    # データオープン
    my $line_num = 0;
    my @lines;

    open(my $data_fh, '<', $data_file)
      or Carp::croak("open error: $data_file");
    
    my $pg_max = $config->{pg_max};
    my $offset = ($page - 1) * $pg_max;
    
    while (my $line = <$data_fh>) {
      if ($line_num >= $offset && $line_num < $offset + $pg_max) {
        $line = Encode::decode('UTF-8', $line);
        push(@lines, $line);
      }
      $line_num++;
    }
    
    # ページャー
    $pager = Data::Page->new;
    $pager->total_entries($line_num);
    $pager->entries_per_page($pg_max);
    $pager->current_page($page);
    
    # ループ部
    $entries = [];
    for my $line (@lines) {
      my $entry = $self->aska->parse_data_line($line);
      
      push @$entries, $entry;
    }

    # コンフィグ
    my $config = app->config;
    
    # ホームページ
    $homepage = $config->{homepage};
    
    # BBSタイトル
    $bbs_title = $config->{bbs_title};
    
    # 画像キャプチャを使う
    $use_captcha = $config->{use_captcha};

    # 画像認証作成
    my $str_plain;
    if ($use_captcha > 0) {
      require $self->app->home->rel_file('lib/captcha.pl');

      ($str_plain,$str_crypt) = cap::make($config->{captcha_key},$config->{cap_len});
    }
    
    # スタッシュ
    $title = $bbs_title;
  }
  
  # レイアウト
  layout 'common', title => $title;
%>

<%= include '/include/header' %>

% if ($message) {
  <%= include 'include/message', message => $message %>
% } elsif ($error) {
  <%= include 'include/error', error => $error %>
% } else {

  <div align="center">
    <h1><%= $bbs_title %></h1>
    <hr width="90%" />
    [<a href="<%= url_for($homepage) %>" target="_top">トップに戻る</a>]
    [<a href="<%= url_for('/note') %>" target="note" onclick="popup('/note')">留意事項</a>]
    [<a href="<%= url_for('/find') %>">ワード検索</a>]
    [<a href="<%= url_for('/admin') %>">管理用</a>]
    <hr width="90%" />
  </div>
  <div class="setback">
    <form action="<%= url_for %>" method="post">
      <%= hidden_field mode => "regist" %>
      <table class="regfm">
        <tr>
          <th>おなまえ</th>
          <td><%= text_field name => session('name'), size => '30' %></td>
        </tr>
        <tr>
          <th>Ｅメール</th>
          <td><%= text_field email => session('email'), size => '30' %></td>
        </tr>
        <tr>
          <th>タイトル</th>
          <td>
            <%= text_field 'sub' => ($res_entry ? $res_entry->{sub} : ''), size => '36' %>
            <%= submit_button '送信する' %><input type="reset" value="リセット" />
          </td>
        </tr>
        <tr>
          <th colspan="2">
              メッセージ<br />
              <%= text_area 'comment' => ($res_entry ? $res_entry->{comment} : ''), cols => '60', rows => '7' %>
          </th>
        </tr>
        <tr>
          <th>参照先</th>
          <td><%= text_field url => session('url') // 'http://', size => '50' %></td>
        </tr>
        <tr>
          <th>削除キー</th>
          <td class="small">
              <%= password_field 'pwd', size => '8'. maxlength => '8' %>
            （英数字で8文字以内）&nbsp;
            <%= check_box cookie => 1, checked => 'checked' %> クッキー情報保存
          </td>

          % if ($use_captcha) {
            </tr><tr>
              <th>画像認証</th>
              <td class="small">
                <%= text_field 'captcha', size => '8', style => 'ime-mode:inactive', maxlength => '8' %>
                （右画像の数字を入力） <img src="<%= url_for("/captcha")->query(crypt => $str_crypt) %>" class="capt" alt="投稿キー" />
                <%= hidden_field str_crypt => $str_crypt %>
              </td>
          % }
        </tr>
      </table>
    </form>
  </div>

  % for my $entry (@$entries) {
    <div class="art">
      [<b><%= $entry->{no} %></b>] <strong><%= $entry->{sub} %></strong>
      投稿者：<b>
      % if (my $email = $entry->{email}) {
        <a href="mailto:<%= $email %>"><%= $entry->{name} %></a>
      % } else {
        <%= $entry->{name} %>
      % }
      </b>
      投稿日：<%= $entry->{date} %> &nbsp; [<a href="<%= url_for->query(res => $entry->{no}) %>">返信</a>]
      <div class="comment">
        <%= $self->aska->parse_comment($entry->{comment}) %>
        
        % if (my $url = $entry->{url}) {
          <p class="url">
            <a href="<%= $url %>" target="_blank"><%= $url %></a>
          </p>
        % }
      </div>
    </div>
  % }
    
  <div class="art-end"></div>
  
  <%= include '/include/pagenation', pager => $pager %>
  
  <div class="ta-c">
    <form action="<%= url_for %>" method="post">
      <%= hidden_field mode => "dele" %>
      記事No<%= text_field 'no', size => "3" %>
      削除キー<%= password_field 'pwd', size => "4", maxlength => "8" %>
      <%= submit_button "削除" %>
    </form>
  </div>
% }

<%= include '/include/footer' %>
